package com.example.listviewtest;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class CustomAdapter extends ArrayAdapter<ListData>{

	//CustomAdapter를 만드려면 ArrayAdapter<데이터객체>를 extends해준다.
	private Context context;
	private int layoutResourceId;
	private ArrayList<ListData> listData;
	
	public CustomAdapter(Context context, int layoutResourceId, ArrayList<ListData> listData) {
		super(context, layoutResourceId, listData);
		
		this.context=context;
		this.layoutResourceId = layoutResourceId;
		this.listData = listData;
	}
	
	public View getView(int position, View convertView, ViewGroup parent){
		
		View row = convertView;
		
		if( row == null){
			LayoutInflater inflater = ((Activity) context).getLayoutInflater();
			
			row = inflater.inflate(layoutResourceId, parent, false);
		}
		
		TextView textView1 = (TextView)row.findViewById(R.id.custom_layout_row_text1);
		TextView textView2 = (TextView)row.findViewById(R.id.custom_layout_row_text2);
		
		ImageView imageView = (ImageView)row.findViewById(R.id.custom_layout_row_image);
		//row.findViewById하는 이유는 당연하겠지?
		//왜냐면 custom_list_row.xml은 특정 activity에 대한 View가 아닌 그냥 따로 만든 xml파일이므로
		//R.id에 설정한 Id가 없겠지...  그러니깐 inflater를 이용해 View객체로 만들어 사용해야겠지! 
		
		try{
			InputStream is = context.getAssets().open(listData.get(position).getImgName());
			Drawable d = Drawable.createFromStream(is, null);
			imageView.setImageDrawable(d);
		} catch(IOException e){
			Log.e("ERROR","ERROR" + e);
		}
		return row;
	}
	

	
}
